#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <limits.h>

#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

#define container_of(ptr, type, member) ({                      \
        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
        (type *)( (char *)__mptr - offsetof(type,member) );})

#define LIST_POISON1  ((void *) 0x00100100)
#define LIST_POISON2  ((void *) 0x00200200)

struct list_head {
	struct list_head *next, *prev;
};

#define LIST_HEAD_INIT(name) { &(name), &(name) }

#define LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

#define INIT_LIST_HEAD(ptr) do { \
	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
} while (0)

static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next) {
	next->prev = new;
	new->next = next;
	new->prev = prev;
	prev->next = new;
}

static inline void list_add(struct list_head *new, struct list_head *head) {
	__list_add(new, head, head->next);
}

static inline void list_add_tail(struct list_head *new, struct list_head *head) {
	__list_add(new, head->prev, head);
}

static inline void __list_del(struct list_head * prev, struct list_head * next) {
	next->prev = prev;
	prev->next = next;
}

static inline void list_del(struct list_head *entry) {
	__list_del(entry->prev, entry->next);
	entry->next = LIST_POISON1;
	entry->prev = LIST_POISON2;
}

static inline void list_del_init(struct list_head *entry) {
	__list_del(entry->prev, entry->next);
	INIT_LIST_HEAD(entry);
}

static inline void list_move(struct list_head *list, struct list_head *head) {
        __list_del(list->prev, list->next);
        list_add(list, head);
}

static inline void list_move_tail(struct list_head *list,
				  struct list_head *head) {
        __list_del(list->prev, list->next);
        list_add_tail(list, head);
}

static inline int list_empty(const struct list_head *head) {
	return head->next == head;
}

#define list_entry(ptr, type, member) \
	container_of(ptr, type, member)

#define list_for_each(pos, head) \
  for (pos = (head)->next; pos != (head);	\
       pos = pos->next)

#define list_for_each_prev(pos, head) \
	for (pos = (head)->prev; prefetch(pos->prev), pos != (head); \
        	pos = pos->prev)

#define list_for_each_safe(pos, n, head) \
	for (pos = (head)->next, n = pos->next; pos != (head); \
		pos = n, n = pos->next)

#define list_for_each_entry(pos, head, member)				\
	for (pos = list_entry((head)->next, typeof(*pos), member);	\
	     &pos->member != (head);					\
	     pos = list_entry(pos->member.next, typeof(*pos), member))

#define list_for_each_entry_reverse(pos, head, member)			\
	for (pos = list_entry((head)->prev, typeof(*pos), member);	\
	     &pos->member != (head); 	\
	     pos = list_entry(pos->member.prev, typeof(*pos), member))

#define list_for_each_entry_safe(pos, n, head, member)			\
	for (pos = list_entry((head)->next, typeof(*pos), member),	\
		n = list_entry(pos->member.next, typeof(*pos), member);	\
	     &pos->member != (head); 					\
	     pos = n, n = list_entry(n->member.next, typeof(*n), member))

#define list_for_each_entry_safe_reverse(pos, n, head, member)		\
	for (pos = list_entry((head)->prev, typeof(*pos), member),	\
		n = list_entry(pos->member.prev, typeof(*pos), member);	\
	     &pos->member != (head); 					\
	     pos = n, n = list_entry(n->member.prev, typeof(*n), member))

#if 0    //DEBUG
#define debug(fmt, args...) fprintf(stderr, fmt, ##args)
#else
#define debug(fmt, args...)
#endif

typedef struct{ // 코드 구조체 
    unsigned char operation; // 코드 동작 시간
    unsigned char length; // 동작
} code;

typedef struct{ // 프로세스 구조체
    int pid; // 프로세스 pid
    int arrival_time; // 도착시간
    int code_bytes; // 코드 길이
    code *operations; // code tuples가 저장된 위치(여기에 operation, length가 들어가있음)
    struct list_head job, ready, wait; // job, ready, wait라는 리스트의 노드 생성
} process;

int main(int argc, char* argv[])
{
    process p; // process 구조체 p
    code c; // code 구조체 c
	LIST_HEAD(job_q); // 리스트 헤드 선언
    process *cur, *next; // process의 포인터

    while(fread(&p, sizeof(int)*3, 1, stdin)) // pid, arrival_time, code_bytes를 읽어옴(int 3개만 짤라서)
    {
		cur = malloc(sizeof(process)); // cur을 생성(포인터가 구조체 자체)
		cur->pid = p.pid;// cur의 pid는 p의 pid
		cur->arrival_time = p.arrival_time;
		cur->code_bytes = p.code_bytes;
        INIT_LIST_HEAD(&cur->job); // cur의 job리스트 초기화

		list_add_tail(&cur->job, &job_q); // job_q라는 리스트와 cur의 job을 연결

		cur->operations = malloc(sizeof(cur->code_bytes)/2); // 사이즈가 가변적이기 때문에 동적할당 

		// operation과 length를 읽어옴
        for(int i=0; i<p.code_bytes/2; i++){  // 코드길이/2 만큼 반복
            fread(&c, sizeof(char)*2, 1, stdin); // char의 크기의 2배만큼 크기 설정
            cur->operations[i].operation = c.operation;
			cur->operations[i].length = c.length;
		}
	}
	//list를 따라서 코드를 하나씩 출력
	list_for_each_entry_reverse(cur, &job_q, job) // job_q 라는 리스트를 거꾸로 순회(cur의 job을 따라서)
	{
		//pid, arrival_time, code_bytes를 출력
		fprintf(stdout, "PID: %03d\tARRIVAL: %03d\tCODESIZE: %03d\n", cur->pid, cur->arrival_time, cur->code_bytes);

        // operation과 length를 출력   
		for(int i=0; i<cur->code_bytes/2; i++){  // 코드길이/2 만큼 반복
			fprintf(stdout, "%d %d\n", cur->operations[i].operation, cur->operations[i].length);
		}
		// 동적할당 해제
		free(cur->operations);
		free(cur);
	}
}

